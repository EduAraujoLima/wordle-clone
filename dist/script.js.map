{"version":3,"sources":["script.js"],"names":["lettersPattern","currentGuessCount","currentGuess","document","querySelector","solutionWord","addEventListener","e","keypress","key","length","test","dataset","letters","updateLetters","deleteFromLetters","submitGuess","_loop","i","setTimeout","revealTile","checkLetter","checkIfGuessComplete","checkWin","jumpTiles","_loop2","classList","add","toLowerCase","showSolution","alert","letter","newLetters","currentTile","updateTiles","tileNumber","innerText","oldLetters","slice","deleteFromTiles","remove","position","guessedLetter","charAt","solutionLetter","checkLetterExists","includes","state","flipTile","tileNum","tile"],"mappings":"AAAA,aACA,IAAMA,eAAiB,WACnBC,kBAAoB,EACpBC,aAAeC,SAASC,cAAc,SAAWH,mBAC/CI,aAAe,SAGrBF,SAASG,iBAAiB,WAAW,SAACC,GAEpC,IAAMC,EAAWD,EAAEE,IACfR,kBAAoB,IAED,GAAnBO,EAASE,QACTV,eAAeW,KAAKJ,EAAEE,MACtBP,aAAaU,QAAQC,QAAQH,OAAS,EAGtCI,cAAcN,GACI,aAATD,EAAEE,KAAsD,IAAhCP,aAAaU,QAAQC,QAEtDE,oBACkB,SAATR,EAAEE,KAAyD,GAAvCP,aAAaU,QAAQC,QAAQH,QAC1DM,kBAKN,IAAMA,YAAc,WAElB,IAFwB,IAAAC,EAAA,SAEfC,GACPC,YAAW,WACTC,WAAWF,EAAGG,YAAYH,MACrB,IAAJA,IAHIA,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAnBC,IAOLI,qBAAuB,SAACJ,GACnB,GAALA,GACFK,YAIEC,UAAY,WAGhB,IAHsB,IAAAC,EAAA,SAGbP,GACPC,YAAW,WACShB,SAASC,cACzB,SAAWH,kBAAoB,QAAUiB,EAAI,IAEnCQ,UAAUC,IAAI,UACrB,IAAJT,IANIA,EAAI,EAAGA,EAAI,EAAGA,IAAKO,EAAnBP,IAULK,SAAW,WACXlB,cAAgBH,aAAaU,QAAQC,QAAQe,cAE/CT,YAAW,WACTK,cACC,MAGHvB,mBAAwC,EACxCC,aAAeC,SAASC,cAAc,SAAWH,mBAExB,GAArBA,mBACFkB,YAAW,WACTU,iBACC,OAKHA,aAAe,WACnBC,MAAM,4CAA8CzB,eAIhDS,cAAgB,SAACiB,GACrB,IACIC,EADa9B,aAAaU,QAAQC,QACRkB,EAC1BE,EAAcD,EAAWtB,OAC7BR,aAAaU,QAAQC,QAAUmB,EAE/BE,YAAYD,EAAaF,IAIrBG,YAAc,SAACC,EAAYJ,GAE/B,IAAIE,EAAc9B,SAASC,cACzB,SAAWH,kBAAoB,OAASkC,GAE1CF,EAAYG,UAAYL,EACxBE,EAAYP,UAAUC,IAAI,eAItBZ,kBAAoB,WAExB,IAAIsB,EAAanC,aAAaU,QAAQC,QAElCmB,EAAaK,EAAWC,MAAM,GAAI,GAEtCpC,aAAaU,QAAQC,QAAUmB,EAC/BO,gBAAgBF,EAAW3B,SAIvB6B,gBAAkB,SAACJ,GAGvB,IAAIF,EAAc9B,SAASC,cACzB,SAAWH,kBAAoB,OAASkC,GAE1CF,EAAYG,UAAY,GACxBH,EAAYP,UAAUc,OAAO,eAKzBnB,YAAc,SAACoB,GAEnB,IAAIC,EAAgBxC,aAAaU,QAAQC,QAAQ8B,OAAOF,GACpDG,EAAiBvC,aAAasC,OAAOF,GAIzC,OAAIC,EAAcd,eAAiBgB,EAC1B,UAIAC,kBAAkBH,GAAiB,UAAY,UAMpDG,kBAAoB,SAACd,GACzB,OAAO1B,aAAayC,SAASf,IAGzBX,WAAa,SAACF,EAAG6B,GAGrBC,SADc9B,EAAI,EACA6B,GAClBzB,qBAAqBJ,IAGjB8B,SAAW,SAACC,EAASF,GACzB,IAAIG,EAAO/C,SAASC,cAClB,SAAWH,kBAAoB,OAASgD,GAE1CC,EAAKxB,UAAUC,IAAI,WACnBR,YAAW,WACT+B,EAAKxB,UAAUC,IAAIoB,KAClB,KACH5B,YAAW,WACT+B,EAAKxB,UAAUc,OAAO,WACtBU,EAAKxB,UAAUC,IAAI,cAClB,KACHR,YAAW,WACT+B,EAAKxB,UAAUc,OAAO,cACrB","file":"script.js","sourcesContent":["//console.log('keypress');\nconst lettersPattern = /[A-Za-z]/; // /^[A-Za-z][A-Za-z0-9]*$/;\nlet currentGuessCount = 1;\nlet currentGuess = document.querySelector(\"#guess\" + currentGuessCount);\nconst solutionWord = \"doskya\";\n\n// detect keypress (letter, backspace, enter, other)\ndocument.addEventListener(\"keydown\", (e) => {\n  //console.log('keypress: ' + e.key);\n  const keypress = e.key;\n  if (currentGuessCount < 7) {\n    if (\n      keypress.length == 1 &&\n      lettersPattern.test(e.key) &&\n      currentGuess.dataset.letters.length < 6\n    ) {\n      //console.log('is letter');\n      updateLetters(keypress);\n    } else if (e.key == \"Backspace\" && currentGuess.dataset.letters != \"\") {\n      //console.log('is backspace');\n      deleteFromLetters();\n    } else if (e.key == \"Enter\" && currentGuess.dataset.letters.length == 6) {\n      submitGuess();\n    }\n  }\n});\n\nconst submitGuess = () => {\n  //console.log('submit guess');\n  for (let i = 0; i < 6; i++) {\n    setTimeout(() => {\n      revealTile(i, checkLetter(i));\n    }, i * 200);\n  }\n};\n\nconst checkIfGuessComplete = (i) => {\n  if (i == 5) {\n    checkWin();\n  }\n};\n\nconst jumpTiles = () => {\n  //console.log('jumpTiles');\n  //console.log(currentGuessCount);\n  for (let i = 0; i < 6; i++) {\n    setTimeout(() => {\n      let currentTile = document.querySelector(\n        \"#guess\" + currentGuessCount + \"Tile\" + (i + 1)\n      );\n      currentTile.classList.add(\"jump\");\n    }, i * 200);\n  }\n};\n\nconst checkWin = () => {\n  if (solutionWord == currentGuess.dataset.letters.toLowerCase()) {\n    // Win\n    setTimeout(() => {\n      jumpTiles();\n    }, 500);\n  } else {\n    // Not won\n    currentGuessCount = currentGuessCount + 1;\n    currentGuess = document.querySelector(\"#guess\" + currentGuessCount);\n    //console.log('not a win, increment guess count to ' + currentGuessCount);\n    if (currentGuessCount == 7) {\n      setTimeout(() => {\n        showSolution();\n      }, 500);\n    }\n  }\n};\n\nconst showSolution = () => {\n  alert(\"Better luck next time. The solution was: \" + solutionWord);\n};\n\n// Update \"letters\"\nconst updateLetters = (letter) => {\n  let oldLetters = currentGuess.dataset.letters;\n  let newLetters = oldLetters + letter;\n  let currentTile = newLetters.length;\n  currentGuess.dataset.letters = newLetters;\n  //console.log('currentTile = ' + currentTile);\n  updateTiles(currentTile, letter);\n};\n\n// Update tile markup\nconst updateTiles = (tileNumber, letter) => {\n  //console.log('updateTiles(' + tileNumber, letter + ')');\n  let currentTile = document.querySelector(\n    \"#guess\" + currentGuessCount + \"Tile\" + tileNumber\n  );\n  currentTile.innerText = letter;\n  currentTile.classList.add(\"has-letter\");\n};\n\n// Backspace -- Delete last letter\nconst deleteFromLetters = () => {\n  // remove last letter from data-letters\n  let oldLetters = currentGuess.dataset.letters;\n  //console.log('oldLetters = ' + oldLetters);\n  let newLetters = oldLetters.slice(0, -1);\n  //console.log('newLetters = ' + newLetters);\n  currentGuess.dataset.letters = newLetters;\n  deleteFromTiles(oldLetters.length);\n};\n\n// Backspace -- Delete last tile markup\nconst deleteFromTiles = (tileNumber) => {\n  // remove markup from last tile\n  //console.log('deleteFromTiles = ' + tileNumber);\n  let currentTile = document.querySelector(\n    \"#guess\" + currentGuessCount + \"Tile\" + tileNumber\n  );\n  currentTile.innerText = \"\";\n  currentTile.classList.remove(\"has-letter\");\n};\n\n// Check letter to solution\n// parameter = letter position in word\nconst checkLetter = (position) => {\n  //console.log('checkLetter');\n  let guessedLetter = currentGuess.dataset.letters.charAt(position);\n  let solutionLetter = solutionWord.charAt(position);\n  //console.log(guessedLetter, solutionLetter);\n\n  // If letters match, return \"correct\"\n  if (guessedLetter.toLowerCase() == solutionLetter) {\n    return \"correct\";\n  }\n  // If not a match, if letter exists in solution word, return \"present\"\n  else {\n    return checkLetterExists(guessedLetter) ? \"present\" : \"absent\";\n  }\n\n  // If not a match, if letter doesn't exist in solution, return \"absent\"\n};\n\nconst checkLetterExists = (letter) => {\n  return solutionWord.includes(letter);\n};\n\nconst revealTile = (i, state) => {\n  //console.log('revealTile = ' + i, state);\n  let tileNum = i + 1;\n  flipTile(tileNum, state);\n  checkIfGuessComplete(i);\n};\n\nconst flipTile = (tileNum, state) => {\n  let tile = document.querySelector(\n    \"#guess\" + currentGuessCount + \"Tile\" + tileNum\n  );\n  tile.classList.add(\"flip-in\");\n  setTimeout(() => {\n    tile.classList.add(state);\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\"flip-in\");\n    tile.classList.add(\"flip-out\");\n  }, 250);\n  setTimeout(() => {\n    tile.classList.remove(\"flip-out\");\n  }, 1500);\n};\n/*\n- if keypress is a letter\n  - update \"letters\" attribute\n    - update tile markup based on \"letters\" value\n- if keypress is backspace\n  - delete last letter in \"letters\"\n    - update tile markup based on \"letters\"\n*/\n"]}